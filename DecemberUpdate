Sub MasterMacro()
'
' This macro links createComparison and parePrices together.  It is not the master sword...it is the MasterMacro()
'
' This macro should be called from a PriceList template file.
'
' This macro is long and complicated.  It has multiple steps that are broken down into their own subroutines.

'For the entire macro, sheet updating will be turned off to enhance process time
Application.ScreenUpdating = False
Application.DisplayAlerts = False
 
'Portability variables
'   The following variables hold the paths to the template files needed for the comparison file.
Dim priceTemplatePath As String
priceTemplatePath = "F:\Awesome Department\Excel Templates\PriceList.xltx"
Dim compareTemplatePath As String
compareTemplatePath = "F:\Awesome Department\Excel Templates\PriceComparison.xltx"
Dim ComparisonDirectoryPath As String
ComparisonDirectoryPath = "F:\Awesome Department\Price Comparison Files"
Dim PriceListDirectoryPath As String
PriceListDirectoryPath = "F:\Awesome Department\DTI Vendor Price Lists"

'Subroutine 1: Ascertain the Vendor ID and insert appropriate data into the new DTI price list for the vendor, allowing comparison between
'   old and new price lists.
    
    'Data Instantiation
        Dim VENDOR_ID As String
        Dim serv_conn As ADODB.Connection
        Set serv_conn = New ADODB.Connection
        Dim RS As New ADODB.Recordset
        Dim OldPriceQuery As String
        Dim OldPriceQueryLine1 As String, OldPriceQueryLine2 As String, OldPriceQueryLine3 As String, OldPriceQueryLine4 As String, OldPriceQueryLine5 As String
        
        
    'Process
        Sheets("NewPrices").Select
        'Select the Vendor Id from the Vendor Id column of the new prices.  The second cell is selected because even if only one part is on the list it will always be populated.
        'If this could be turned into a table column reference the code could perhaps be more portable.
        VENDOR_ID = ActiveSheet.Range("J2")
        
        'Set the connection string, allowing for the Connection.Open function to work
        serv_conn.ConnectionString = "Driver={SQL Server};Server=ERPSQL;Database=EpicorReports"
        'Left out UID and PWD--seems to automatically use windows authentication
        serv_conn.Open
        
        'Now that a connection has been formed, a query can be made to bring in the old pricing data, setting up the pricelist to be pared down to only necessary parts.
        OldPriceQuery = "SELECT DISTINCT    TOP (100) PERCENT VendPart.Company, VendPart.PartNum, VendPart.BaseUnitPrice, VendPart.PUM, VendPart.EffectiveDate, VendPart.VenPartNum,"
        OldPriceQuery = OldPriceQuery & "                      VendPart.ConvFactor , VendPart.ExpirationDate, VendPart.DiscountPercent, Vendor.VendorID, PartPlant.BuyToOrder"
        OldPriceQuery = OldPriceQuery & " FROM         Epicor10.Erp.VendPart AS VendPart LEFT OUTER JOIN"
        OldPriceQuery = OldPriceQuery & "                       Epicor10.dbo.Vendor AS Vendor ON Vendor.Company = VendPart.Company AND VendPart.VendorNum = Vendor.VendorNum"
        OldPriceQuery = OldPriceQuery & " LEFT JOIN Epicor10.Erp.PartPlant As PartPlant ON VendPart.PartNum = PartPlant.PartNum AND VendPart.VendorNum = PartPlant.VendorNum"
        'This line is where the vendor id is inserted into the query
        OldPriceQuery = OldPriceQuery & " WHERE     (Vendor.VendorID IN ('" & VENDOR_ID & "'))ORDER BY VendPart.PartNum"
        
        'Open the recordset to allow for the execution of the query
        Set RS.ActiveConnection = serv_conn
        RS.Open OldPriceQuery
        'May be possible to truncate this operation
        'Copy the data to the excel worksheet to allow for reference.
        Sheets("OldPrices").Select
        ActiveSheet.Range("A2").CopyFromRecordset RS
        
'Subroutine 2: To pare or not to pare?
'This subroutine determines the amount of parts in both the old price list and the new price list.  It then gives this information to the user and asks if they want to
'pare the prices down.  If yes, only matching vendor part numbers with the old data will be copied into the pared prices worksheet.  If no, the new data will simply be copied into the pared
'prices worksheet.  The pared prices worksheet is where the macro will eventually copy prices into the price comparison worksheet.

    'Data Instantiation
    Dim NumOldParts As Long
    Dim NumNewParts As Long
    Dim Answer As Integer
    
    'Process
    NumOldParts = Worksheets("OldPrices").UsedRange.Rows.Count - 1
    NumNewParts = Worksheets("NewPrices").UsedRange.Rows.Count - 1
    Answer = MsgBox("There are " & NumOldParts & " old parts and " & NumNewParts & " new parts. Do you want to pare the new price sheet?", vbYesNo + vbQuestion, "Optional Paring Operation")
    
    If Answer = vbYes Then
        'Create a long variable to hold the bottom row address of the transferred prices.  This will allow referencing of the end of the range of prices and thus allow the table
        ' to be resized to it.
        Dim Bottom As Long
        'This variable holds the part number from the old pricelist so that it can be checked for in the new one
        Dim OldPricePartNum As String
        'This boolean variable is set to true if a part number is found in the old pricing data.  It allow a for loop to end early when it has found the part
        Dim ExistsInOld As Boolean
                
        'These variables hold the tables used in this subroutine.  Storing the tables will allow easy reference throughout the process.
        Dim priceTable As ListObject
        Dim oldPriceTable As ListObject
        Sheets("NewPrices").Select
        Set priceTable = ActiveSheet.ListObjects("PriceTable")
        Sheets("OldPrices").Select
        Set oldPriceTable = ActiveSheet.ListObjects("OldPriceTable")

        'This variable holds a found cell.  Storing it will allow its row to be copied and placed in the pared prices worksheet.
        Dim fCell As Range
        Dim SearchArea As Range
        Dim TableRange As Range
        'Create a range to check for prices
        Sheets("NewPrices").Select
        Set SearchArea = ActiveSheet.ListObjects("PriceTable").ListColumns(6).Range
        'Create variable to hold position of line to be pasted on.  This will create a consistent point of reference
        'to paste the next row on, as looping variables are not guaranteed to have the right row number.
        Dim j As Integer
        j = 2
        Dim k As Integer
        k = 2

        'Create variable to hold number of times the part number was not found in the new price list.
        'This will allow a report to be given to the user of the missing parts from the new pricelist.
        Dim CountNotFound As Integer
        CountNotFound = 0


        'Process
        Sheets("OldPrices").Select
        For i = 2 To oldPriceTable.Range.Rows.Count
            'Store the partnumber so it can be checked for in the new price list
            OldPricePartNum = Cells(i, 6).Value
            'Go to the new price sheet to scan it.
            Sheets("NewPrices").Select
            'Set fcell to the found item, if it exists.  This allows the cell to be referenced and its row to be copied.
            Set fCell = SearchArea.Cells.Find(OldPricePartNum)
            'If it is found, paste it in the pared prices sheet to store it in a new price list to be updated in E10.
            If Not fCell Is Nothing Then
                ActiveSheet.Rows(fCell.Row).Copy
                'Go to the pared prices sheet to add the parts that match between the new price list and old.
                Sheets("ParedPrices").Select
                Cells(j, 1).Select
                'Increment j to get to the next row to be pasted on.
                j = j + 1
                Selection.PasteSpecial xlPasteAll
            Else
                'If the part is not found, increment the countNotFound variable to keep track of missing parts.
                CountNotFound = CountNotFound + 1
                'Go to the pared prices worksheet and make a column of missing partnumbers so that it can be available to a user
                'for reference
                Sheets("ParedPrices").Select
                Cells(k, 11).Value = OldPricePartNum
                'Increment k to get to the next cell to hold a missing part number
                k = k + 1
            End If
            Sheets("OldPrices").Select
        Next i

        'Refresh the used range and then select it to re-size the table
        Sheets("ParedPrices").Select
        Sheets("ParedPrices").UsedRange
        'Set bottom to the number of rows in the used range to allow the table to be resized.
        Bottom = Worksheets("ParedPrices").UsedRange.Rows.Count

        'Extend the table
        ActiveSheet.ListObjects("ParedPriceTable").Resize Range("$A$1:$K" & Bottom)
      
        'Create a msgbox to inform the user of missing parts.
        MsgBox CountNotFound & " parts were not found in the new price list" & ". " & NumNewParts - NumOldParts & " parts were deleted from the new price list."
    Else
        'If no desire to pare, simply copy the new prices worksheet into the pared prices
        'Create a range variable to allow the header to be left off from copying
        Dim rng
        Set rng = Worksheets("NewPrices").UsedRange
        Intersect(rng, rng.Offset(1)).Copy Worksheets("ParedPrices").Range("A2")
    End If
        
'Subroutine 3: Comparison is the Death of Joy
'Open a new priceComparison template file and give it a name based on user input.
'Then copy over the appropriate columns from the vendor prices worksheet.
'Finally, paste in the necessary data from Epicor for the three other sheets in the comparison workbook

    'Data Instantiation
    Dim ComparisonFileName As String
    Dim CompareFile As Workbook
    Dim ComparisonFilePath As String
    Dim PriceFile As Workbook
    Set PriceFile = ActiveWorkbook
    
    'Process
    'Get a new file name for the comparison file to be saved
    ComparisonFileName = InputBox("Enter a desired name for the new price comparison file. Do not include the extension.", "File Name")
    'Create the full path for the comparison file so it can be checked if it exists already
    ComparisonFilePath = ComparisonDirectoryPath & "\" & ComparisonFileName & ".xlsx"
    If Len(Dir(ComparisonFilePath)) = 0 Then
        'The file name is not already in use and the file may be created. Do nothing.
    Else
        While Not Len(Dir(ComparisonFilePath)) = 0
            ComparisonFileName = InputBox("File already exists.  Please enter a different name.", "New File Name")
            ComparisonFilePath = ComparisonDirectoryPath & ComparisonFileName
        Wend
    End If
    'Now, create the file with the given name.
    Set CompareFile = Workbooks.Add(compareTemplatePath)
    'Save it in case of error
    'CompareFile.SaveAs Filename:=ComparisonFilePath
    
    'Now copy over the new pricing data from the "ParedPrices" sheet from the price list file
    'Starting with the company and vendor columns, as those are the first two on the comparison file
    PriceFile.Sheets("ParedPrices").Range("ParedPriceTable[Company], ParedPriceTable[VendorID]").Copy
    'Now copy into the first two columns of the price comparison sheet to start building it.
    CompareFile.Worksheets("PriceView").Range("A2").PasteSpecial
    
    
    'Copy the PartNum and VenPartNum columns over to the comparison file
    PriceFile.Sheets("ParedPrices").Range("ParedPriceTable[PartNum], ParedPriceTable[VenPartNum]").Copy
    CompareFile.Worksheets("PriceView").Range("C2").PasteSpecial
    'Copy the PUM
    PriceFile.Sheets("ParedPrices").Range("ParedPriceTable[PUM]").Copy
    CompareFile.Worksheets("PriceView").Range("F2").PasteSpecial
    'Copy the Cost column
    PriceFile.Sheets("ParedPrices").Range("ParedPriceTable[BaseUnitPrice]").Copy
    CompareFile.Worksheets("PriceView").Range("G2").PasteSpecial
    
        
    'Query the previous pricing to allow for comparison
    'Open the recordset to allow for the execution of the query
        RS.Close
        RS.Open OldPriceQuery
        'May be possible to truncate this operation
        'Copy the data to the excel worksheet to allow for reference.
        CompareFile.Sheets("Previous Pricing").Select
        ActiveSheet.Range("A2").CopyFromRecordset RS
    
    'Now that old data has been copied over, paste in the old price and stock item column
    'to make price comparisons.
    'To do this, a range must be created from the vendor part number and the old price.  The vendor part
    ' number column must be shifted to achieve this.
    CompareFile.Worksheets("Previous Pricing").Activate
    'Perform the shift
    Columns("F:F").Cut
    Columns("C:C").Insert Shift:=xlToRight
    'Create the named range
    Range("C1:D2").Select
    Range(Selection, Selection.End(xlDown)).Select
    ActiveWorkbook.Names.Add Name:="OldPriceRange", RefersToR1C1:= _
        "=OldPriceTable[[#All],[VenPartNum]:[NonStock]]"
     ActiveWorkbook.Names.Add Name:="OldPriceRange2", RefersToR1C1:= _
        "=OldPriceTable[[#All],[PartNum]:[BaseUnitPrice]]"
    'Apply the vlookup for the old prices
    CompareFile.Worksheets("PriceView").Select
    Range("H2").Select
    'Add a conditional that checks for the part number first, and if a match is not found then the venpartnum is checked.
    'This allows the cost to be associated with the actual part in the cases that multiple DTI parts are associated with
    'a single vendor part.
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-5],OldPriceRange2, 3, FALSE), VLOOKUP(RC[-4],OldPriceRange,2, FALSE))"
    
    
    'Now fill out the price change columns and percent change columns using formulas.  This allows human comparison.
    CompareFile.Worksheets("PriceView").Range("ComparisonTable[$Change]").Formula = "=G2-H2"
    CompareFile.Worksheets("PriceView").Range("ComparisonTable[%Change]").Formula = "=J2/G2"
    
    'Now apply a vlookup for stock identification
    Range("K2").Select
    ActiveCell.FormulaR1C1 = "=VLOOKUP(RC[-7],OldPriceRange,9, FALSE)"
    Range("ComparisonTable[Stock Item]").Copy
    Range("ComparisonTable[Stock Item]").PasteSpecial xlPasteValues
    'Modify the language from boolean to yes/no to make more readable
    Worksheets("PriceView").Columns("K").Replace _
        What:="False", Replacement:="Yes", _
        SearchOrder:=xlByColumns, MatchCase:=False
    Worksheets("PriceView").Columns("K").Replace _
        What:="True", Replacement:="No", _
        SearchOrder:=xlByColumns, MatchCase:=False
    Worksheets("PriceView").Columns("K").Replace _
        What:="0", Replacement:="No", _
        SearchOrder:=xlByColumns, MatchCase:=False
    
'Subroutine 4: Who's your data
'Now, fill the remaining data sheets of the price comparison workbook to allow the remaining columns to be entered
'in the price comparison worksheet
    
    'Fill the quantity shipped sheet.
    'First, refresh the recordset.
    RS.Close
    'Now, create the query for quantity shipped.
    Dim QtyShipQuery As String
    QtyShipQuery = "SELECT     dbo.v_InvoiceRegisterForTurns.VendName, dbo.v_InvoiceRegisterForTurns.PartNum, SUM(dbo.v_InvoiceRegisterForTurns.OurShipQty) AS QuantityShipped" _
                   & " FROM         Epicor10.Erp.Vendor INNER JOIN" _
                   & " dbo.v_InvoiceRegisterForTurns ON Epicor10.Erp.Vendor.Name = dbo.v_InvoiceRegisterForTurns.VendName" _
                   & " WHERE     (dbo.v_InvoiceRegisterForTurns.InvoiceDate > DATEADD(yyyy, - 1, GETDATE())) AND (Epicor10.Erp.Vendor.VendorID = '" & VENDOR_ID & "')" _
                   & " GROUP BY dbo.v_InvoiceRegisterForTurns.VendName, dbo.v_InvoiceRegisterForTurns.PartNum"
    RS.Open QtyShipQuery
    'May be possible to truncate this operation
    'Copy the data to the excel worksheet to allow for reference.
    CompareFile.Sheets("VendorFilteredQtyShipped").Select
    ActiveSheet.Range("A2").CopyFromRecordset RS
        
    'Fill the price change report data sheet
    'First, refresh the recordset
    RS.Close
    'Now, create the query for the price change report data
    Dim PriceChangeQuery As String
    PriceChangeQuery = "SELECT     db_ddladmin.v_PartNumsWithContracts.Company, db_ddladmin.v_PartNumsWithContracts.PartNum, db_ddladmin.v_PartNumsWithContracts.ListCode, " _
                       & " db_ddladmin.v_PartNumsWithContracts.NumberOfListCodes, db_ddladmin.v_QuoteNumLineForOpenQuotesCONCd.QuoteNumLine, " _
                       & " db_ddladmin.v_QuoteNumLineForOpenQuotesCONCd.NumberOfQuoteNumLines , Epicor10.Erp.Vendor.VendorID " _
                       & " FROM         Epicor10.Erp.Vendor INNER JOIN" _
                       & " Epicor10.Erp.PartPlant ON Epicor10.Erp.Vendor.VendorNum = Epicor10.Erp.PartPlant.VendorNum RIGHT OUTER JOIN " _
                       & " db_ddladmin.v_PartNumsWithContracts ON Epicor10.Erp.PartPlant.PartNum = db_ddladmin.v_PartNumsWithContracts.PartNum RIGHT OUTER JOIN " _
                       & " db_ddladmin.v_QuoteNumLineForOpenQuotesCONCd ON Epicor10.Erp.PartPlant.Company = db_ddladmin.v_QuoteNumLineForOpenQuotesCONCd.Company AND" _
                       & " Epicor10.Erp.PartPlant.PartNum = db_ddladmin.v_QuoteNumLineForOpenQuotesCONCd.PartNum" _
                       & " WHERE     (Epicor10.Erp.Vendor.VendorID = '" & VENDOR_ID & "') AND (Epicor10.Erp.PartPlant.Plant = 'DIST') "
    'Set the cursor location to client side, allowing proper data querying.
    RS.CursorLocation = adUseClient
    'Conduct the query to load it into the recordset
    RS.Open PriceChangeQuery
    'Now it can be loaded into its appropriate sheet for reference
    CompareFile.Sheets("VendorFilteredPriceChangeReport").Select
    ActiveSheet.Range("A2").CopyFromRecordset RS
    
    'Fill the recent contracts tab
    'First, refresh the recordset
    RS.Close
    'Now, create the query for the most recent contract expirations
    Dim ContractExpirationQuery
    ContractExpirationQuery = "select PriceLstParts.Company, Vendor.VendorID, VendPart.VenPartNum, PriceLstParts.ListCode, " _
                              & " MAX(CASE WHEN PriceLst.EndDate IS NOT NULL THEN PriceLst.EndDate ELSE DATEADD(year, 1, PriceLst.StartDate) END) AS ExpirationDate" _
                              & " from Epicor10.Erp.VendPart As VendPart LEFT JOIN Epicor10.Erp.PriceLstParts As PriceLstParts" _
                              & " ON VendPart.VenPartNum = PriceLstParts.PartNum LEFT JOIN Epicor10.Erp.Vendor as Vendor on Vendor.VendorNum = VendPart.VendorNum" _
                              & " LEFT JOIN Epicor10.Erp.PriceLst AS PriceLst ON PriceLst.ListCode = PriceLstParts.ListCode" _
                              & " where Vendor.VendorID = 'BRADYWOR' AND PriceLstParts.ListCode IS NOT NULL" _
                              & " GROUP BY VendPart.VenPartNum, PriceLstParts.Company, Vendor.VendorID, PriceLstParts.ListCode"
    'Conduct the query to load it into the recordset
    RS.Open ContractExpirationQuery
    'Now it can be loaded into its appropriate sheet for reference
    CompareFile.Sheets("RecentContracts").Select
    ActiveSheet.Range("A2").CopyFromRecordset RS
    
                                         
'Subroutine 5: Numbers never lie
'
'Perform vertical lookups on the recently gathered data to fill out the price comparison sheet.
'

    'Create the named range for quantity shipped
    
    CompareFile.Worksheets("VendorFilteredQtyShipped").Select
    Range("B2:C2").Select
    Range(Selection, Selection.End(xlDown)).Select
    ActiveWorkbook.Names.Add Name:="QtyRange", RefersToR1C1:= _
        "=QtyShipTable[[#All],[PartNum]:[QuantityShipped]]"
    
    'Apply the vlookup for the 12MonthShipQty
    CompareFile.Worksheets("PriceView").Select
    Range("L2").Select
    'An iferror handler has been added to this line.  The double quotes must be escaped using more double quotes for the second argument.
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-9],QtyRange,2, FALSE),"""")"

    'Create the named range for the price change report data
    CompareFile.Worksheets("VendorFilteredPriceChangeReport").Select
    Range("B2:G2").Select
    Range(Selection, Selection.End(xlDown)).Select
    ActiveWorkbook.Names.Add Name:="ReportRange", RefersToR1C1:= _
        "=PriceChangeTable[[#All],[PartNum]:[NumberOfQuotes]]"
    
    'Apply the vlookups for the pricechange data
    CompareFile.Worksheets("PriceView").Select
    Range("M2").Select
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-10], ReportRange, 2, FALSE),"""")"
    Range("N2").Select
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-11], ReportRange, 3, FALSE),"""")"
    Range("O2").Select
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-12], ReportRange, 4, FALSE),"""")"
    Range("P2").Select
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-13], ReportRange, 5, FALSE),"""")"
    
    'Create the named range for the price change report data
    CompareFile.Worksheets("RecentContracts").Select
    Range("C2:E2").Select
    Range(Selection, Selection.End(xlDown)).Select
    ActiveWorkbook.Names.Add Name:="ExpirationRange", RefersToR1C1:= _
        "=ExpirationTable[[#All],[PartNum]:[Latest ExpirationDate]]"
    
    'Apply the vlookups for the pricechange data
    CompareFile.Worksheets("PriceView").Select
    Range("Q2").Select
    ActiveCell.FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-14], ExpirationRange, 3, FALSE),"""")"
        
    'If preferred, a capability to copy the vlookup values and paste back as simple values could be added here
           
        
        
        


'Turn on screen updating to return to normal operation parameters of excel
Application.ScreenUpdating = True
Application.DisplayAlerts = True

End Sub
